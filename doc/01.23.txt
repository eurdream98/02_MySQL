01.23

수업 자료 11번까지는 SELECT와 관련됬음

DISTINCT는 SELECT 바로 뒤, 컬럼명 시작 바로 앞에 하나만 붙혀준다. 

두 컬럼 이상을 DISTICT하면 조합이 중복이면 생략

LIMIT -> 결과 집합에서 반환할 행의 수를 제한

LIMIT은 ORDERBY를 하고 난 뒤에 적어주면 된다. 

두가지 버전
LIMIT(offset) : offset 부터 가져옴 -> 인덱스 체계임
LIMIT(offset,row_count); : offset부터 row_count갯수 만큼 열 가져옴 

JOIN : 두 개 이상의 테이블을 관련 있는 컬럼을 통해 결합하는데 사용

JOIN은 반드시 연관있는 컬럼이 존재해야한다.

ALIAS : 별칭이라는 뜻으로 컬럼 또는 테이블에 별칭을 부여할 수 있다.  

-컬럼의 뒤 쪽에 AS를 작성 후 붙히고 싶은 별칭을 ''을 통해넣는다.
* as와 ''을 생략가능 단, ''은 특수문자가 없을 때만 생략 가능하다. 
컬럼별칭을 ORDER BY나 WHERE에서 대신 사용 가능하다.

테이블 별칭을 컬럼앞에 a.menu_name처럼 명시적으로 사용 가능하다.

JOIN의 종류

1. INNER JOIN
두 테이블의 교집합을 반환하는 SQL JOIN 유형
INNER JOIN대신 그냥JOIN을 써도 된다. 
연결에 사용 될 컬럼명이 동일하지 않거나, 동일하거나 모두 사용 가능
 1-1 ON을 이용한 문법
연결에 사용한 두 컬럼의 이름이 달라도 됨
1-2 USING을 이용한 문법
연겨렝 사용한 두 컬럼의 이름이 같아야함.

* INNER JOIN은 일치값만 반환하고 나머지는 배제한다.
일치값 말고 다른 값들도 가져오고 싶을 때는 OUTER JOIN을 활용한다.

2. OUTER JOIN

INNERJOIN은 INNER가 생략 가능했지만 LEFT JOIN은 LEFT가 생략불가능

2. LEFT JOIN : LEFT 생략 불가능
3. RIGHT JOIN : RIGHT JOIN 오른쪽 테이블을 기준으로 모든 것을 가져옴

 4. CROSS JOIN : 두 테이블의 모든 가능한 조합을 반환하는 SQL JOIN유형  

5. SELF JOIN : 같은 테이블 내에서 행과 행 사이의 관계를 찾기 위한 JOIN

GROUPING
GROUP BY -> 하나의 기준으로 그룹으로 나누겠다.

GROUP BY -> 여러개의 기준으로도 그룹으로 나눌 수 있다. 이 때 기분이 되는 여러개의컬럼의 조합이 유일의 여부가 된다. 

HAVING -> GROUP이 나눠진 후 사용할 수 있으며 그 GROUP에 대한 조건을 달고 싶을 경우 사용한다. 

ROLLUP -> 집계함수
그룹핑해서 찾아낸 값의 총 합을 확인 가능

조건식이 2개이상일 경우 첫번째 group by에 서술 된 컬럼에 대한 중간 집계와 최종적인 총 집계가 나타남

SUBQUERIES : 서브 쿼리
다른 쿼리 내에서 실행 되는 쿼리. 서브 쿼리의 결과를 활용해서 복잡한 MAIN QUERY를 작성해 한 번에 여러 작업을 수행할 수 있음 쿼리를 변수처럼 쓰는 것이다. 괄호 안에 넣어 서브쿼리임을 나타낸다. 

FROM절에 쓰인 서브쿼리(derived table, 파생 테이블) 모든 파생 테이블은 별칭을 가져야한다. 

FROM절에 쓰인 서브쿼리를 파생테이블이라고 한다.

상관서브쿼리 : 메인 쿼리가 서브 쿼리의 결고에 영향을 주는 경우를 말한다.
순서대로 돌면서 테이블들을 생성한다. 

EXISTS : 조회 결과가 있으면 true, 없으면 false를 반환하는 연산자

ORDER BY 1;  -- 컬럼 순번으로 작성 가능(컬럼 순번 : SELECT 절에 나열 된 컬럼의 순서)

CTE (Common Table Expressions)
-- 파생 테이블과 비슷한 개념으로 코드의 가독성 및 재사용성을 위해 파생 테이블 대신 사용한다.
-- FROM 절(JOIN절) 에서만 사용 된다.

미리 WITH 별칭 AS()절에 서브쿼리를 넣어 가독성있게 만들어주는 역할

SETOPERATOR
SET 연산자는 2개 이상의 SELECT문의 결과 집합을 결합하는데 사용한다.단, 결합하는 결과 집합의 컬럼이 동일해야한다. 
1. UNION 첫 번째 조회구문 UNION 두 번째 조회구문 -> 중복된 것은 출력 X
합집합과 같다.
2. UNIONALL UNION과 같지만 중복되는 행도 출력
3. INTERSECT 두 개 이상의 SELECT 문의 결과 중 공통 되는 레코드만을 반환하는 연산자 
교집합과 같다.
MySQL에서는 제공하지 않는다. INNER JOIN 또는 IN 연산자를 활용해서 구현 가능
4. MINUS 
MySQL에서 제공 X, LEFTER JOIN을 이용한다.
차집합과 같다,앞 뒤 순서 중요하다. 

ORDER BY에는 컬럼명,별칭,컬럼 순번 모두 올 수 있다. , DESC를통해 내림차순으로 변화가능

GROUP BY는 그룹함수와 같이 쓴다.

