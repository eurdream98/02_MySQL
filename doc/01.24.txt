01.24
DML 
데이터 조작 언어 -> 테이블에 값을 삽입,수정,삭제하는 SQL문

DML : 데이터 조작어
DDL : 데이터 정의어
DCL : 데이터 

사용 스키마 바꾸는 법 : USE 스키마 명

INSERT INTO 테이블명 VALUES(데이터들): 테이블명에 데이터들을 삽입하겠습니다.

VALUES()안에는 테이블 컬럼 형식에 맞게 넣어준다. 

컬럼마다 형식,null여부등이 다르다.

NULL 허용 가능 컬럼 또는 auto_increment 설정 된 컬럼을 제외하고 insert 할 컬럼을 지정해서 insert 가능

단 NULL을 생략하고 VALUES()에 쓰려면 INSERT INTO 후 테이블컬럼을 어떤 형식으로 작성할지를 적어야한다. 

데이터 삽입시 컬럼을 명시할 경우 데이터의 순서를 바꾸는 것도 가능

multi insert (여러 행을 한 번에 삽입) 콤마를 통해 나열하여 삽입 

UPDATE : 컬럼의 값을 수정하는 구문으로 행 갯수 변화는 없다.

update 테이블명 set 수정하고자하는 컬럼명 = 수정하고자 하는 내용

where절을 사용해서 특정 레코드만 선택해서 수정할 수 있다.

SET에서도 나열하여 여러개 수정 가능

 MySQL에서는 update,delete 시 자기 자신 테이블의 데이터를 사용하면 1903에러가 발생함. 이 때 SUBQUERY를 한 번 더 사용하여 임시 테이블로 사용하면 해결할 수 있음. 

SUBQUERY의 결과가 1개이냐 여러개냐에 따라 =을 쓰던가 IN을 쓰는지 달라짐 조심!!

DELETE : 테이블의 행을 삭제하는 구문으로 테이블의 행의 갯수가 줄어든다.

LIMIT을 활용하여 행을 삭제할 수 있다.(단, offset 지정 불가) 첫 번째부터 몇개를 지울지 결정 가능 

WHERE절을 활용한 행 삭제 

REPLACE : 중복 된 데이터를 덮어 쓸 수 있는 기능 
INSERT 시 PRIMARY KEY 또는 UNIQUE KEY가 충돌이 발생할 때 사용 가능 
REPACE시 INTO도 생략가능

REPLACE는 ISNERT,UPDATE대신 사용 가능하다. 

TRANSACTION
단위이다. 데이터베이스에서 한 번에 수행되는 작업의
-> 예를들어 회원가입 시 회원 정보들이 입력되었을 때 테이블에 INSERT될 것이다. 두 개의 테이블에 INSERT한다고 할 때 이를 하나의 작업으로 묶어야한다. 왜냐하면 두 작업이 모두 완료 되야 회원가입이 완료 된 것으로 인식할 수 있기 때문에 두개의 INSERT를 하나의 트랜잭션으로 묶어야한다. 그래서 두 작업 중 하나라도 오류가 난다면 롤백을 해준다.
두 작업이 모두 잘 수행되었다면 커밋을 진행한다.

롤백 : 시작 이전 단계로 되돌리는 작업

하지만 MySQL은 자동 커밋 설정되어있다. 롤백을 하기 위해서는 자동 커밋 설정을 해주어야한다. 

autocommit 활성화
SET autocommit = 1;
SET autocommit = ON; 둘 다 오토커밋으로 하겠습니다. 라는 의미

COMMIT -> 지금의 상태를 최종 반영하겠다는 의미

오토커밋을 비활성화한 상태에서는 COMMIT이라는 구문 없이 ROLLBACK키워드를 사용한다면 ROLLBACK전의 작업들이 모두 취소 된 상태로 돌아간다. 

COMMIT; -- 트랜잭션을 최종 반영해서 저장한다. 
ROLLBACK; -- 트랜잭션을 되돌린다.

커밋은 중간저장 느낌이고 ROLLBACK은 중간저장을 하지 않은 상태에서 파일을 종료하는 것을 의미한다. 

DDL = 데이터를 정의하는 언어 

데이터 정의 : 테이블 생성
1. CREATE
CREATE TABLE IF NOT EXISTS : 기본에 존재하는 테이블에 있어도 오류가 발생하지 않음

CREATE TABLE IF NOT EXISTS tb1 (
컬럼명1 데이터타입 제약조건들,
컬렴명2 데이터타입 제약조건들,
.
.
.
);

CREATE할 때 컬럼,타입등을 정해줘야함.

char(1) : 고정 문자열
varchar(30) : 문자가 30개 들어갈 공간을 만든다. 유동적-> 3자리만 입력하면 3자리의 공간만 만듦

CHECK(col1 IN('Y','N')) : 체크 제약조건 co1의 컬럼에 값은 y,n만 올 수 있다.

컬럼을 만들어주고 소괄호 뒤에 ENGINE=INNODB을 적어준다 -> 많은 저장엔진 중 INNODB를 이용해서 테이블을 수행하겠다는 말이다. 

INNODB와 MyISAM 의차이점은 트랜잭션기능의 제공 여부이다. 삽입 수정 삭제가 없고 조회가 주로 일어난다면 MyISAM엔진을 이용하는것이 적합하다. 

DESCRIBE 명령어 -> 테이블 구조 확인

AUTO_INCREMENT : INSERT 시 PRIMARY KEY에 해당하는 컬럼에 자동으로 번호를 발생 시켜 중복 되지 않는 값을 만들 수 있다.
이후 INSERT INTO를 통해 VALUE값을 넣을 때 AUTO_INCREMENT로 설정한 값에 NULL넣어도 문제 X

ALTER : 테이블에 추가,변경,수정,삭제하는 모든 명령어는 ALTER를 사용해 적용

(1)테이블에 열 추가 ADD
ALTER TABLE tb2
ADD col2 INT NOT NULL;

(2) 열 삭제 : ALTER TABLE 테이블명 DROP COLUM 컬럼명 
ALTER TABLE tb2
DROP COLUMN col2;
 
 (3) 열 이름 및 데이터 형식 변경: ALTER TABLE 테이블명 CHANGE COLUMN 기존 컬렴명 바꿀컬럼명 컬럼정의
ALTER TABLE tb2
CHANGE COLUMN fk change_fk INT NOT NULL;

(4) 열 제약 조건 추가 및 삭제 : ALTER TABLE 테이블명 DROP 제약조건 
1. DROP
제약조건 제거 
2. MODIFY
컬럼 정의 수정

AUTO INCREMNT는 제약조건이 아니기 때문에 DROP을 통해서 없앨 수 없고 MODIFY를 통해서 컬럼 정의 수정을 통해 없애거나 만들 수 있다.

(5) 제약조건 추가 :  ALTER TABLE 테이블명 ADD 제약조건
ALTER TABLE tb2
ADD PRIMARY KEY(pk);
DESCRIBE tb2;

(6) 컬럼 여러개 추가하기 
ALTER TABLE tb2
ADD col3 DATE NOT NULL,
ADD col4 INT NOT NULL;

* DATE타입의 컬럼을 추가할 때 date 타입이 0으로 추가되지 않는 설정이 필요하다(root에서만 가능 ) 
SET GLOBAL sql_mode = '';
SELECT @@GLOBAL.sql_mode;
설정 값을 지워주고 확인하는 모습

DROP 테이블 삭제
DROP TABLE IF EXISTS tb3;
DROP TABLE IF EXISTS tb4,tb5; 나열

5. TRUNCATE : 테이블에 존재하는 모든 데이터 제거
DELETE FROM 테이블명;과의 차이점은 DELETE는 행을 하나씩 지우지만 TRUNCATE는 DROP 이후 테이블을 재생성 해주므로 효율적이다.

CONSTRAINT

데이터 무결성 검사

1. NOTNULL 테이블 CREATE시 만들때 설정해줌 -> 컬럼명 자료형 다음에 작성 
2. UNUQUE 유일 값
3. PRIMARY KEY -> 식별자  NOTNULL+UNIQUE조건을 둘 다 갖고 있다.
복합키를 할 때 테이블 레벨에 컬럼명들을 작성하여 묶어서 선언해줄 수 있다.
4. FOREIGN KEY -> 참조 된 다른 테이블에서 제공하는 값만 사용할 수 있도록 하는 제약 조건 참조 무결성을 위배하지 않는다. 제공값 외에 NULL값을 사용할 수 있다. 
자식테이블에 제약조건이 붙는다. FK는 다른테이블의 PK를 참조하고 있는 형태로 나타난다. 
부모테이블에서 자식 테이블이 참조하고 있는 컬럼은 삭제할 수 없다. FK제약 조건에 의해서
자식테이블의 FK에 삭제룰을 추가해서 삭제가 가능하게 만들 수 있다.
5. CHECK 

join은 foreign키가 아니여도 가능하지만 무결성검증을 해주는 foreign키가 있다면 더 안전하게 join이 가능하다. 

DEFAULT을 통해 기본값 삽입 가능

ERD에서 #은 PK, *NOT NULL,동글뱅이는 NULLABLE,












